name: Hobbify API

on: [push]

env:
  WEB_IMAGE: docker.pkg.github.com/$GITHUB_REPOSITORY/web
  NGINX_IMAGE: docker.pkg.github.com/$GITHUB_REPOSITORY/nginx

jobs:

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v1
      - name: Add environment variables to .env
        run: |
          echo DEBUG=0 >> .env
          echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> .env
          echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .env
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          REDIS_URL=${{ secrets.REDIS_URL }} >> .env
          CELERY_FLOWER_USER=${{ secrets.CELERY_FLOWER_USER }} >> .env
          CELERY_FLOWER_PASSWORD=${{ secrets.CELERY_FLOWER_PASSWORD }} >> .env
          DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} >> .env
          DJANGO_ADMIN_URL=admin
          DJANGO_SETTINGS_MODULE=config.settings.production
          MAILGUN_API_KEY=${{ secrets.MAILGUN_API_KEY }} >> .env
          MAILGUN_DOMAIN=${{ secrets.MAILGUN_DOMAIN }} >> .env
          CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }} >> .env
          CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }} >> .env
          CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }} >> .env
      - name: Set environment variables
        run: |
          echo ::set-env name=WEB_IMAGE::${{ env.WEB_IMAGE }}
          echo ::set-env name=NGINX_IMAGE::${{ env.NGINX_IMAGE }}
      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull images
        run: |
          docker pull ${{ env.WEB_IMAGE }} || true
          docker pull ${{ env.NGINX_IMAGE }} || true
      - name: Build images
        run: |
          docker-compose -f production.yml build
      - name: Push images
        run: |
          docker push ${{ env.WEB_IMAGE }}
          docker push ${{ env.NGINX_IMAGE }}
  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout master
        uses: actions/checkout@v1
      - name: Add environment variables to .env
        run: |
          echo DEBUG=0 >> .env
          echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> .env
          echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .env
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          REDIS_URL=${{ secrets.REDIS_URL }} >> .env
          CELERY_FLOWER_USER=${{ secrets.CELERY_FLOWER_USER }} >> .env
          CELERY_FLOWER_PASSWORD=${{ secrets.CELERY_FLOWER_PASSWORD }} >> .env
          DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} >> .env
          DJANGO_ADMIN_URL=admin
          DJANGO_SETTINGS_MODULE=config.settings.production
          MAILGUN_API_KEY=${{ secrets.MAILGUN_API_KEY }} >> .env
          MAILGUN_DOMAIN=${{ secrets.MAILGUN_DOMAIN }} >> .env
          CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }} >> .env
          CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }} >> .env
          CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }} >> .env
      - name: Add the private SSH key to the ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"
      - name: Build and deploy images on DigitalOcean
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          scp  -o StrictHostKeyChecking=no -r ./.env ./docker-compose.prod.yml root@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }}:/app
          ssh -o StrictHostKeyChecking=no root@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }} << 'ENDSSH'
            cd /app
            source .env
            docker login docker.pkg.github.com -u alandavd -p ce70f1d4a3a906ce8ac24caa6870fd29f2273d30
            docker pull $WEB_IMAGE
            docker pull $NGINX_IMAGE
            docker-compose -f production.yml up -d
          ENDSSH